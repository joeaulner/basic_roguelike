Project Name: basic_roguelike
Creator: Joseph A.
Start Date: 10 Jan 2015


OVERVIEW:

All header files are currently located in the "resources" directory. At the
moment, my inclusion system is very sloppy. The existing header files will need
to be restructured, renamed, etc. I plan on looking into the Deep C
presentations and existing github projects in order to determine what the best
approach will be for structuring my project.

I was previously developing this project on my Uiversity's Unix servers on
which I originally learned C programming, but have migrated it over to one of
my new Raspberry Pi's with a standard Raspbian setup. I have yet to decide if I
want to install and utilize the ncurses library (or something similar) for
portability, and will probably continue to program strictly for the Unix
environment until the project gets more "advanced" or I have a desire to make
it function on other systems.

The current "map generation" algorithm randomly generates rectangular rooms
with dimensions up to 9 tiles high and 23 tiles wide. A total of 15 rooms are
generated. At this point, there is no way to add doors or connect rooms to each
other via corridors. I am not happy with the room generation at the moment, and
am looking into alternative strategies, possibly using cellular automata for
generating cave-like structures instead.


CURRENT EXECUTABLES:

basic_roguelike.c:
This file is designed to test the actual implementation of the various aspects
of rougulikes such as map representation, movement, attack, defense, etc.


CURRENT HEADERS:

displayChars.h
This file contains enums defining the intended usage of various cp437 symbols.

displayStyle.h
This file contains the definitions of various ansi escape sequences used to
print formatted output.

kbhit.h
This file, provided by Chris Giese, provides the kbhit() and getch functions
used to listen for and retrieve raw, single-character input from the keyboard.

monsters.h
This file is used for structs/functions related to monsters and their generation.
This may also be the location of monster AI's in the future, but depending on
how complex they get, they might require their own header or maybe data files.

genMap.h
This file is used to define the map size as well as provide the functions
necessary for randomly generating said map.
